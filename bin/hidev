#!/usr/bin/env php
<?php

/*
 * HiDev - integrate your development.
 *
 * @link      http://hidev.me/
 * @package   hidev
 * @license   BSD 3-clause
 * @copyright Copyright (c) 2015 HiQDev
 */

ini_set('error_reporting', E_ALL & ~E_DEPRECATED & ~E_STRICT & ~E_NOTICE);

defined('YII_DEBUG') or define('YII_DEBUG', true);
defined('YII_ENV') or define('YII_ENV', 'dev');

// fcgi doesn't have STDIN and STDOUT defined by default
defined('STDIN') or define('STDIN', fopen('php://stdin', 'r'));
defined('STDOUT') or define('STDOUT', fopen('php://stdout', 'w'));

$PRJDIR = dirname(__DIR__);
$VENDOR = "$PRJDIR/vendor";

if (!is_dir($VENDOR)) {
    $VENDOR = dirname(dirname($PRJDIR));
}

require("$VENDOR/autoload.php");
#require("$VENDOR/minii/core/Yii.php");

/// Check if it is init command
$isInit = $argv[1]==='init';

/// Look for config file in current directory and up.
$configDir = '.hidev';
if (!$isInit) {
    for ($i = 0;$i < 9;++$i) {
        if (is_dir($configDir)) {
            break;
        }
        chdir('..');
    }
}

Yii::setAlias('@prj',    $PRJDIR);
Yii::setAlias('@hidev',  '@prj/src');
Yii::setAlias('@source', getcwd());
Yii::setAlias('@config', '@source/.hidev');
Yii::setAlias('@vendor', $VENDOR);
Yii::setLogger(Yii::createObject('hidev\base\Logger'));

$config = [
    'id'                    => 'hidev',
    'name'                  => 'HiDev - integrate your development',
    'isInit'                => $isInit,
    'basePath'              => '@prj/src',
    'vendorPath'            => '@vendor',
    'runtimePath'           => '@prj/runtime',
    'enableCoreCommands'    => false,
    'controllerNamespace'   => 'hidev\\controllers',
    'defaultRoute'          => 'default/deps',
    'bootstrap'             => ['log', 'pluginManager', 'config'],
    'components'            => [
        'log' => [
            'targets' => [
                [
                    'class' => 'yii\log\FileTarget',
                    'levels' => ['error', 'warning', 'info'],
                ],
            ],
        ],
        'robo' => [
            'class' => 'hidev\goals\RoboGoal',
        ],
        'config' => [
            'class' => 'hidev\goals\ConfigGoal',
        ],
        'pluginManager' => [
            'class' => 'hiqdev\pluginmanager\PluginManager',
            'goals' => [
                'README.md'             => 'readme',
                'README.txt'            => 'readme',
                'README.markdown'       => 'readme',
                'CHANGELOG.md'          => 'changelog',
                'CHANGELOG.txt'         => 'changelog',
                'CHANGELOG.markdown'    => 'changelog',
                'install'               => [
                    'require' => [
                        'hiqdev/hidev' => '*@dev',
                    ],
                ],
            ],
        ],
        'request' => [
            'class' => 'hidev\base\Request',
        ],
        'view' => [
            'class' => 'hidev\base\View',
            'theme' => [
                'pathMap' => [
                    '@app/views' => ['@config/templates'],
                ],
            ],
            'renderers' => [
                'twig' => [
                    'class' => 'yii\twig\ViewRenderer',
                    'cachePath' => '@runtime/Twig/cache',
                    'options' => [
                        'auto_reload' => true,
                    ],
                    'extensions' => ['Twig_Extension_StringLoader'],
                ],
            ],
        ],
        'cache' => [
            'class' => 'yii\caching\FileCache',
        ],
    ],
];

try {
    $application = new hidev\base\Application($config);
    $exitCode = $application->run();
} catch (Exception $e) {
    if ($e instanceof \yii\base\InvalidParamException || $e instanceof \yii\console\Exception) {
        Yii::error($e->getMessage());
        $exitCode = 1;
    } else {
        throw $e;
    }
}
exit($exitCode);

function d ()
{
    foreach (func_get_args() as $a) {
        var_dump($a);
    }
    debug_print_backtrace(0,1);
    die();
}
